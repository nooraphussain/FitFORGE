<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<!-- Boxicons -->
	<link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
	<!-- My CSS -->

    <link rel="stylesheet" href="/css/admin.css">  
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Bootstrap Bundle JS (Includes Popper.js) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

	<title>AdminHub</title>
</head>
<style>
     .new-category-btn {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 10px 18px;
    background-color:  var(--blue);
    font-size: 14px;
    font-weight: 500;
    color: #ffffff;
    border: none;
    cursor: pointer;
    margin-right: 20px;
    }

    .filter-btn, .new-category-btn {
    display: inline-flex;
    border-radius: 26px !important;
    width: auto;
    }
    .filter-btn:hover, .new-category-btn:hover {
        background-color: #7da0e6;
        transform: scale(1.05);
    }

    .custom-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-weight: bold;
    cursor: pointer;
    }

    .custom-btn-warning {
        background-color: #fcc110; 
        color: #ffffff;
    }

    .custom-btn-primary {
        background-color: #1988ff; 
        color: #fff;
    }


    #offcanvasCategory {
        --bs-body-color: var(--blue); 
    }

    /* Change the close button color */
    #offcanvasCategory .btn-close {
        filter: grey;
    }

    /* Change Save button */
    #offcanvasCategory .btn-primary {
        background-color: var(--blue);
        border-color: var(--blue);
    }

    #offcanvasCategory .btn-primary:hover {
        background-color: var(--blue);
        opacity: 0.8;
    }

    /* Custom Styles for Pagination */
    .pagination-container {
        margin: 50px 400px;
    }

    .pagination {
        background-color: #f8f9fa; 
        border-radius: 5px;
    }

    .page-link {
        color: var(--blue); 
        background-color: transparent; 
        border: none;
        font-size: 14px; 
    }

    .page-item.active .page-link {
        color: #fff;
        background-color:var(--blue); 
    }

    .page-item .page-link:hover {
        color: #0056b3; 
    }

    .page-item .page-link:focus {
        box-shadow: none;
    }

    /* EDIT CATEGORY */
    .container {
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: -150px; 
    }

    .card {
        margin-top: 700px;
        margin-left: -150px;
        width: 1000px; 
        height: 1250px; 
        padding: 2rem;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        border-radius: 12px;
    }

    h2.text-primary {
        color: var(--blue) !important; 
    }

    .btn-primary {
        background-color: var(--blue) !important;
        border-color: var(--blue) !important;
    }

    .btn-primary:hover {
        background-color: var(--blue);
        opacity: 0.8;
    }

    .form-control {
        font-size: 1rem;
        padding: 12px;
    }

    .btn {
        font-size: 1rem;
        padding: 12px 20px;
        margin-left: 50px;
        margin-right: 50px;
    }

    textarea.form-control {
    height: 200px; 
    resize: none;
    }

    /* image-preview */
    .image-preview-container {
    display: flex; 
    flex-wrap: wrap; 
    gap: 10px; 
    }

    .image-preview-item {
    position: relative;
    flex: 0 0 auto;
    width: 150px;
    height: 150px;
    background-color: #2a2a2a;
    border: 2px dashed #444;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden; 
    margin-bottom: 10px; 
    }

    .delete-btn {
        position: absolute;
        bottom: 0; 
        left: 50%;
        transform: translateX(-50%); 
        background: transparent;
        color: white;
        font-size: 1 rem; 
        border: none;
        cursor: pointer;
        padding: 5px;
        margin: 0;
        z-index: 10; 
    }

    .delete-btn:hover {
        color: #e53935; 
        transition: color 0.3s ease;
    }

    .delete-btn:focus {
        outline: none; 
    }
    .image-preview-item img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }


</style>
<body>


	<!-- SIDEBAR -->
	<section id="sidebar">
		<a href="/admin" class="brand">
            <i class='bx bxs-smile'></i>
            <span class="text">AdminHub</span>
        </a>
        
        <ul class="side-menu top">
            <li class="active">
                <a href="/admin">
                    <i class='bx bxs-dashboard'></i>
                    <span class="text">Dashboard</span>
                </a>
            </li>
			<li>
				<a href="products.html">
					<i class='bx bxs-shopping-bag-alt' ></i>
					<span class="text">Products</span>
				</a>
			</li>
			<li>
				<a href="orders.html">
					<i class='bx bxs-doughnut-chart' ></i>
					<span class="text">Orders</span>
				</a>
			</li>
			<li>
				<a href="/admin/category">
					<i class='bx bxs-category' ></i>
					<span class="text">Categories</span>
				</a>
			</li>
			<li>
				<a href="/admin/customers">
					<i class='bx bxs-group' ></i>
					<span class="text">Customers</span>
				</a>
			</li>
            <li>
				<a href="#">
					<i class='bx bxs-message-dots' ></i>
					<span class="text">Message</span>
				</a>
			</li>
		</ul>
		<ul class="side-menu">
            <li>
                <a href="#">
                    <i class='bx bxs-cog'></i>
                    <span class="text">Settings</span>
                </a>
            </li>
            <li>
                <a href="/admin/logout" class="logout">  
                    <i class='bx bxs-log-out-circle'></i>
                    <span class="text">Logout</span>
                </a>
            </li>
        </ul>
        
	</section>
	<!-- SIDEBAR -->



	<!-- CONTENT -->
	<section id="content">
		<!-- NAVBAR -->
		<nav>
			<i class='bx bx-menu' ></i>
			<a href="#" class="nav-link">Categories</a>
			<form action="#">
				<div class="form-input">
					<input type="search" placeholder="Search...">
					<button type="submit" class="search-btn"><i class='bx bx-search' ></i></button>
				</div>
			</form>
			<input type="checkbox" id="switch-mode" hidden>
			<label for="switch-mode" class="switch-mode"></label>
			<a href="#" class="notification">
				<i class='bx bxs-bell' ></i>
				<span class="num">8</span>
			</a>
			<a href="#" class="profile">
				<img src="/images/admin.jpeg">
			</a>
		</nav>
		<!-- NAVBAR -->

		<!-- MAIN -->
		<main style="background-color: var(--grey);">
            <div class="head-title">
                <div class="left">
                    <h1>Products</h1>
                    <ul class="breadcrumb">
                        <li><a href="/admin">Dashboard</a></li>
                        <li><i class='bx bx-chevron-right'></i></li>
                        <li><a class="active" href="/admin/category">Product</a></li>
                        <li><i class='bx bx-chevron-right'></i></li>
                        <li><a class="active" href="/admin/category">Edit Product</a></li>
                    </ul>
                </div>


                <div class="container d-flex justify-content-center align-items-center vh-100" style="margin-top: 0px;">
                    <div class="col-md-8">
                        <div class="card shadow-lg border-0 rounded-4 p-4" style="height: 100%;">
                            <h2 class="text-center text-primary mb-4">Edit Product</h2>
                            <form method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data" id="form-data">
                                <!-- Existing Images -->
                                <input type="hidden" name="existingImages" value='<%= JSON.stringify(product.productImage) %>' />
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Existing Images</label>
                                    <div class="image-preview-container" id="currentImageContainer">
                                        <% product.productImage.forEach((image, index) => { %>
                                            <div class="image-preview-item">
                                                <img src="/uploads/product-images/<%= image %>" alt="Product image <%= index + 1 %>">
                                                <button type="button" class="delete-btn" data-image-id="<%= index %>">Delete</button>
                                            </div>
                                        <% }); %>
                                    </div>
                                </div>

                                <!-- Add More Images Button -->
                                <div class="mb-4">
                                    <button type="button" class="btn btn-primary" onclick="addMoreImages()">Add More Images</button>
                                </div>

                                <!-- Hidden File Input for Adding Images -->
                                <input type="file" id="imageInput" name="productImage" accept="image/*" multiple style="display: none;">

                                <!-- Container for New Images -->
                                <div class="image-preview-container" id="newImageContainer"></div>   


                                <!-- Product Name -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Product Name</label>
                                    <input type="text" name="productName" value="<%= product.productName %>" class="form-control border rounded-pill shadow-sm px-3 py-2" required />
                                </div>
                                <!-- Brand -->
                                <!-- <div class="mb-4">
                                    <label class="form-label fw-bold">Brand</label>
                                    <input type="text" name="brand" value="<%= product.brand %>" class="form-control border rounded-pill shadow-sm px-3 py-2" required />
                                </div> -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Category</label>
                                    <select name="productCategory" class="form-control border rounded-pill shadow-sm px-3 py-2" required>
                                        <% categories.forEach(cat => { %>
                                            <option value="<%= cat._id %>" <%= product.category._id.equals(cat._id) ? 'selected' : '' %>>
                                                <%= cat.name %>
                                            </option>
                                        <% }) %>
                                    </select>
                                </div>                                
                                <!-- Regular Price -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Regular Price</label>
                                    <input type="number" name="regularPrice" value="<%= product.regularPrice %>" 
                                        class="form-control border rounded-pill shadow-sm px-3 py-2"
                                        step="0.01" min="1" required id="regularPrice" />
                                </div>

                                <!-- Sale Price -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Sale Price</label>
                                    <input type="number" name="salePrice" value="<%= product.salePrice %>" 
                                        class="form-control border rounded-pill shadow-sm px-3 py-2"
                                        step="0.01" min="1" required id="salePrice" />
                                </div>
                                <!-- Offer -->
                                <!-- Change from text to number input -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Offer (%)</label>
                                    <input type="number" name="offer" value="<%= product.offer %>" 
                                        class="form-control border rounded-pill shadow-sm px-3 py-2"
                                        step="0.01" min="0" max="100" id="offerInput" />
                                </div>
                                <!-- Add category offer display after the product offer input -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Category Offer (%)</label>
                                    <input type="number" class="form-control border rounded-pill shadow-sm px-3 py-2" 
                                           value="<%= product.category.categoryOffer || 0 %>" disabled />
                                    <small class="text-muted">This offer is applied to all products in this category</small>
                                </div>

                                <!-- Add applied offer display -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Applied Offer (%)</label>
                                    <input type="text" class="form-control border rounded-pill shadow-sm px-3 py-2" 
                                           value="<%= Math.max(product.offer || 0, product.category.categoryOffer || 0) %>%" disabled />
                                    <small class="text-muted">The larger of product and category offers will be applied</small>
                                </div>
                                <!-- Quantity -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Quantity</label>
                                    <input type="number" name="quantity" value="<%= product.quantity %>" class="form-control border rounded-pill shadow-sm px-3 py-2" required />
                                </div>
                                <!-- Color -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Color</label>
                                    <input type="text" name="color" value="<%= product.color %>" class="form-control border rounded-pill shadow-sm px-3 py-2" />
                                </div>
                                <!-- Action Buttons -->
                                <div class="d-flex justify-content-between mt-4">
                                    <a href="/admin/products" class="btn btn-outline-secondary px-4 py-2 rounded-pill">
                                        <i class="fas fa-arrow-left"></i> Cancel
                                    </a>
                                    <button class="btn btn-primary px-4 py-2 rounded-pill" type="submit">
                                        <i class="fas fa-save"></i> Update Product
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>                

            </main>
            <!-- MAIN -->
        </section>
        <!-- CONTENT -->

        <script>
            
            function addMoreImages() {
                document.getElementById('imageInput').click();
            }

            document.getElementById('imageInput').addEventListener('change', function(event) {
                const newImageContainer = document.getElementById('newImageContainer');
                newImageContainer.innerHTML = ''; 

                Array.from(event.target.files).forEach(file => {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const imgPreview = document.createElement('div');
                        imgPreview.classList.add('image-preview-item');
                        imgPreview.innerHTML = `
                            <img src="${e.target.result}" alt="New image">
                            <button type="button" class="delete-btn" onclick="this.parentElement.remove()">Delete</button>
                        `;
                        newImageContainer.appendChild(imgPreview);
                    };
                    reader.readAsDataURL(file);
                });
            });
        </script>

        </script> 
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const deleteButtons = document.querySelectorAll('.delete-btn');
                const currentImageContainer = document.getElementById('currentImageContainer');
                const newImageContainer = document.getElementById('newImageContainer');
                
                // Track deleted images
                const deletedImages = [];
        
                function checkMinimumImages() {
                    const currentImagesCount = currentImageContainer.querySelectorAll('.image-preview-item:not([style*="display: none"])').length;
                    const newImagesCount = newImageContainer.querySelectorAll('.image-preview-item').length;
                    return currentImagesCount + newImagesCount >= 3;
                }
        
                deleteButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        const productId = '<%= product._id %>'; 
                        const imageIndex = this.getAttribute('data-image-id');
                        
                        // Hide this image temporarily to check if we would go below minimum
                        const imageItem = this.closest('.image-preview-item');
                        imageItem.style.display = 'none';
                        
                        // Check if deleting would result in fewer than 3 images
                        if (!checkMinimumImages()) {
                            // Show SweetAlert and restore the image
                            Swal.fire({
                                title: 'Cannot Delete Image',
                                text: 'Products must have at least 3 images',
                                icon: 'warning',
                                confirmButtonText: 'OK'
                            });
                            imageItem.style.display = ''; // Restore display
                            return;
                        }
                        
                        // Create hidden input to track deleted images
                        const hiddenInput = document.createElement('input');
                        hiddenInput.type = 'hidden';
                        hiddenInput.name = 'deletedImages[]';
                        hiddenInput.value = imageIndex;
                        document.getElementById('form-data').appendChild(hiddenInput);
                        
                        // Add to deleted images array
                        deletedImages.push(imageIndex);
                    });
                });
                
                // Function to add more images
                function addMoreImages() {
                    document.getElementById('imageInput').click();
                }
                
                // When new images are selected
                document.getElementById('imageInput').addEventListener('change', function(event) {
                    const newImageContainer = document.getElementById('newImageContainer');
                    
                    Array.from(event.target.files).forEach(file => {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            const imgPreview = document.createElement('div');
                            imgPreview.classList.add('image-preview-item');
                            imgPreview.innerHTML = `
                                <img src="${e.target.result}" alt="New image">
                                <button type="button" class="delete-btn" onclick="this.parentElement.remove()">Delete</button>
                            `;
                            newImageContainer.appendChild(imgPreview);
                        };
                        reader.readAsDataURL(file);
                    });
                });
                
                // Form submission handler
                document.getElementById('form-data').addEventListener('submit', function(e) {
                    if (!checkMinimumImages()) {
                        e.preventDefault();
                        Swal.fire({
                            title: 'Error',
                            text: 'Products must have at least 3 images',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                });
                
                // Make addMoreImages available globally
                window.addMoreImages = addMoreImages;
            });
        </script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const regularPrice = document.querySelector('input[name="regularPrice"]');
        const salePrice = document.querySelector('input[name="salePrice"]');
        const offer = document.querySelector('input[name="offer"]');
        const categoryOffer = <%= product.category.categoryOffer || 0 %>;
        
        // Function to calculate the applied offer
        function getAppliedOffer() {
            const productOffer = parseFloat(offer.value) || 0;
            return Math.max(productOffer, categoryOffer);
        }
    
        // Update sale price when offer changes
        offer.addEventListener('input', () => {
            if(regularPrice.value) {
                const regular = parseFloat(regularPrice.value);
                const appliedOffer = getAppliedOffer();
                const calculatedSale = regular - (regular * appliedOffer / 100);
                salePrice.value = calculatedSale.toFixed(2);
            }
        });
    
        // Update offer when sale price changes
        salePrice.addEventListener('input', () => {
            if(regularPrice.value && salePrice.value) {
                const regular = parseFloat(regularPrice.value);
                const sale = parseFloat(salePrice.value);
                const calculatedOffer = ((regular - sale) / regular) * 100;
                
                // Only update product offer if it would be higher than category offer
                if (calculatedOffer > categoryOffer) {
                    offer.value = calculatedOffer.toFixed(2);
                } else {
                    // If category offer is higher, keep it as is and recalculate sale price
                    const appliedOffer = getAppliedOffer();
                    const calculatedSale = regular - (regular * appliedOffer / 100);
                    salePrice.value = calculatedSale.toFixed(2);
                }
            }
        });
    
        // Validate regular price changes
        regularPrice.addEventListener('input', () => {
            if(regularPrice.value) {
                const regular = parseFloat(regularPrice.value);
                const appliedOffer = getAppliedOffer();
                salePrice.value = (regular - (regular * appliedOffer / 100)).toFixed(2);
            }
        });
        
        // Initial calculation to ensure sale price reflects the applied offer
        if(regularPrice.value) {
            const regular = parseFloat(regularPrice.value);
            const appliedOffer = getAppliedOffer();
            salePrice.value = (regular - (regular * appliedOffer / 100)).toFixed(2);
        }
    });
</script>
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>


<script src="/js/admin.js"></script>
</body>
</html>
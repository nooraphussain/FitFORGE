<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Boxicons -->
    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
    <!-- My CSS -->
    <link rel="stylesheet" href="/css/admin.css">  
    
    <!-- Include SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

    <!-- Include SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Bootstrap Bundle JS (Includes Popper.js) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <title>AdminHub</title>
</head>
<style>

.image-preview-item {
    position: relative;
    width: 150px;
    height: 150px;
    background-color: #2a2a2a;
    border: 2px dashed #444;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden; /* Ensure content doesn't overflow */
    margin-bottom: 10px; /* Space between images */
}

.delete-btn {
    position: absolute;
    bottom: 0; /* Align button at the bottom of the image */
    left: 50%;
    transform: translateX(-50%); /* Center button horizontally */
    background: transparent;
    color: white; /* Black color for the icon */
    font-size: 1 rem; /* Larger size for better visibility */
    border: none;
    cursor: pointer;
    padding: 5px;
    margin: 0;
    z-index: 10; /* Ensure the button is above the image */
}

.delete-btn:hover {
    color: #e53935; /* Change to red when hovering */
    transition: color 0.3s ease;
}

.delete-btn:focus {
    outline: none; /* Remove focus outline */
}


    .size-buttons {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

.size-btn {
    padding: 0.5rem;
    background-color: #2a2a2a;
    border: 1px solid #444;
    color: white;
    cursor: pointer;
    border-radius: 4px;
}

.size-btn:hover {
    background-color: #333;
}



.size-btn.active {
    background-color: #4CAF50;
    border-color: #4CAF50;
}

    #croppedImageSection {
        display: none;
        height: 80px; /* Reduced height to make it medium */
        text-align: center;
        margin-top: 10px;
    }
    .product-form-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 2rem;
        background-color: #1a1a1a;
        border-radius: 8px;
    }

    .form-title {
        color: white;
        margin-bottom: 2rem;
        font-size: 1.5rem;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 2rem;
    }

    .form-left {
        width: 100%;
    }

    .image-upload-section {
        margin-top: 2rem;
    }

    .section-title {
        color: white;
        margin-bottom: 1rem;
        font-size: 1.25rem;
    }

    .image-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-top: 1rem;
    }



    .image-preview-item img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    .file-input {
        display: none;
    }

    .upload-label {
        display: inline-block;
        padding: 0.5rem 1rem;
        background-color: #2a2a2a;
        color: white;
        cursor: pointer;
        border-radius: 4px;
        text-align: center;
        width: 100%;
        margin-top: 1rem;
    }

    .upload-label:hover {
        background-color: #333;
    }

    .size-options {
        color: white;
        margin-top: 1.5rem;
    }

    .size-buttons {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .size-btn {
        padding: 0.5rem;
        background-color: #2a2a2a;
        border: 1px solid #444;
        color: white;
        cursor: pointer;
        border-radius: 4px;
    }

    .size-btn:hover {
        background-color: #333;
    }

    .size-btn.active {
        background-color: #4CAF50;
        border-color: #4CAF50;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        color: white;
        margin-bottom: 0.5rem;
    }


    .form-input:focus {
        outline: none;
        border-color: #4CAF50;
    }

    textarea.form-input {
        min-height: 100px;
        resize: vertical;
    }

    .submit-btn {
        background-color: #4CAF50;
        color: white;
        padding: 0.75rem 2rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
        margin-top: 1.5rem;
    }

    .submit-btn:hover {
        background-color: #45a049;
    }

    /* Add basic responsiveness */
    @media (max-width: 768px) {
        .product-form-container {
            padding: 1rem;
        }
    }

    .crop-btn {
        position: absolute;
        bottom: 5px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
    }


     .new-category-btn {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 10px 18px;
    background-color:  var(--blue);
    font-size: 14px;
    font-weight: 500;
    color: #ffffff;
    border: none;
    cursor: pointer;
    margin-right: 20px;
    }

    .filter-btn, .new-category-btn {
    display: inline-flex;
    border-radius: 26px !important;
    width: auto;
    }
    .filter-btn:hover, .new-category-btn:hover {
        background-color: #7da0e6;
        transform: scale(1.05);
    }

    .custom-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-weight: bold;
    cursor: pointer;
    }

    .custom-btn-warning {
        background-color: #fcc110; 
        color: #ffffff;
    }

    .custom-btn-primary {
        background-color: #1988ff; 
        color: #fff;
    }

    /* Apply var(--blue) to all elements inside the offcanvas */
    #offcanvasCategory {
        --bs-body-color: var(--blue); /* Change text color */
    }

    /* Change the close button color */
    #offcanvasCategory .btn-close {
        filter: grey;
    }

    /* Change Save button */
    #offcanvasCategory .btn-primary {
        background-color: var(--blue);
        border-color: var(--blue);
    }

    #offcanvasCategory .btn-primary:hover {
        background-color: var(--blue);
        opacity: 0.8;
    }

    /* Custom Styles for Pagination */
    .pagination-container {
        margin: 50px 400px;
    }

    .pagination {
        background-color: #f8f9fa; /* Light background color */
        border-radius: 5px;
    }

    .page-link {
        color: var(--blue); 
        background-color: transparent; 
        border: none;
        font-size: 14px; 
    }

    .page-item.active .page-link {
        color: #fff;
        background-color:var(--blue); 
    }

    .page-item .page-link:hover {
        color: #0056b3; 
    }

    .page-item .page-link:focus {
        box-shadow: none; 
    }

    /* ADD CATEGORY */
    .container {
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: -80px; 
    }

    .card {
        margin-top: 800px;
        margin-left: -150px;
        width: 1000px; 
        height: 1500px; 
        padding: 2rem;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        border-radius: 12px;
    }


    h2.text-primary {
        color: var(--blue) !important; 
    }

    .btn-primary {
        background-color: var(--blue) !important;
        border-color: var(--blue) !important;
    }

    .btn-primary:hover {
        background-color: var(--blue);
        opacity: 0.8;
    }

    .form-control {
        font-size: 1rem;
        padding: 12px;
    }

    .btn {
        font-size: 1rem;
        padding: 12px 20px;
        margin-left: 50px;
        margin-right: 50px;
    }

    textarea.form-control {
    height: 200px; /* Increase textarea height */
    resize: none; /* Prevent resizing */
    }



</style>
<body>


    <!-- SIDEBAR -->
    <section id="sidebar">
        <a href="/admin" class="brand">
            <i class='bx bxs-smile'></i>
            <span class="text">AdminHub</span>
        </a>
        
        <ul class="side-menu top">
            <li class="active">
                <a href="/admin">
                    <i class='bx bxs-dashboard'></i>
                    <span class="text">Dashboard</span>
                </a>
            </li>
            <li>
                <a href="/admin/products">
                    <i class='bx bxs-shopping-bag-alt' ></i>
                    <span class="text">Products</span>
                </a>
            </li>
            <li>
                <a href="/admin/orders">
                    <i class='bx bxs-doughnut-chart' ></i>
                    <span class="text">Orders</span>
                </a>
            </li>
            <li>
                <a href="/admin/category">
                    <i class='bx bxs-category' ></i>
                    <span class="text">Categories</span>
                </a>
            </li>
            <li>
                <a href="/admin/customers">
                    <i class='bx bxs-group' ></i>
                    <span class="text">Customers</span>
                </a>
            </li>
            <li>
                <a href="#">
                    <i class='bx bxs-message-dots' ></i>
                    <span class="text">Message</span>
                </a>
            </li>
        </ul>
        <ul class="side-menu">
            <li>
                <a href="#">
                    <i class='bx bxs-cog'></i>
                    <span class="text">Settings</span>
                </a>
            </li>
            <li>
                <a href="/admin/logout" class="logout">  <!-- Change href -->
                    <i class='bx bxs-log-out-circle'></i>
                    <span class="text">Logout</span>
                </a>
            </li>
        </ul>
        
    </section>
    <!-- SIDEBAR -->



    <!-- CONTENT -->
    <section id="content">
        <!-- NAVBAR -->
        <nav>
            <i class='bx bx-menu' ></i>
            <a href="#" class="nav-link">Categories</a>
            <form action="#">
                <div class="form-input">
                    <input type="search" placeholder="Search...">
                    <button type="submit" class="search-btn"><i class='bx bx-search' ></i></button>
                </div>
            </form>
            <input type="checkbox" id="switch-mode" hidden>
            <label for="switch-mode" class="switch-mode"></label>
            <a href="#" class="notification">
                <i class='bx bxs-bell' ></i>
                <span class="num">8</span>
            </a>
            <a href="#" class="profile">
                <img src="/images/admin.jpeg">
            </a>
        </nav>
        <!-- NAVBAR -->

        <!-- MAIN -->
        <main style="background-color: var(--grey);">
            <div class="head-title">
                <div class="left">
                    <h1>Products</h1>
                    <ul class="breadcrumb">
                        <li><a href="/admin">Dashboard</a></li>
                        <li><i class='bx bx-chevron-right'></i></li>
                        <li><a class="active" href="/admin/category">Product</a></li>
                        <li><i class='bx bx-chevron-right'></i></li>
                        <li><a class="active" href="/admin/category">Add Product</a></li>
                    </ul>
                </div>


                <div class="container d-flex justify-content-center align-items-center vh-100">
                    <div class="col-md-8">
                        <div class="card shadow-lg border-0 rounded-4 p-4" style="height: 100%;">
                            <h2 class="text-center text-primary mb-4">Add Product</h2>
                            <form class="product-form" method="post" action="/admin/addProduct" enctype="multipart/form-data">
                                <!-- Product Name -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Product Name</label>
                                    <input type="text" id="productName" name="productName" class="form-control border rounded-pill shadow-sm px-3 py-2"  />
                                </div>
                                <!-- Brand -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Brand</label>
                                    <input type="text" name="brand" class="form-control border rounded-pill shadow-sm px-3 py-2" />
                                </div>
                                <!-- Category -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Category</label>
                                    <select name="productCategory" class="form-control border rounded-pill shadow-sm px-3 py-2" required>
                                        <% categories.forEach(cat => { %>
                                            <option value="<%= cat._id %>" id="option-cat">
                                                <%= cat.name %>
                                            </option>
                                        <% }) %>
                                    </select>
                                </div>
                                <!-- Description -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Description</label>
                                    <input type="text" name="description" class="form-control border rounded-pill shadow-sm px-3 py-2"  />
                                </div>
                                <!-- Regular Price -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Regular Price</label>
                                    <input type="number" name="regularPrice" 
                                           class="form-control border rounded-pill shadow-sm px-3 py-2"
                                           step="0.01" min="1" required>
                                </div>
                                <!-- Sale Price -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Sale Price</label>
                                    <input type="number" name="salePrice" 
                                           class="form-control border rounded-pill shadow-sm px-3 py-2"
                                           step="0.01" min="1" required>
                                </div>
                                <!-- Offer -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Offer (%)</label>
                                    <input type="number" name="offer" 
                                           class="form-control border rounded-pill shadow-sm px-3 py-2"
                                           step="0.01" min="0" max="100">
                                </div>
                                <!-- Add after the offer input field -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Category Offer</label>
                                    <div class="input-group">
                                        <input type="text" id="categoryOffer" class="form-control border rounded-pill shadow-sm px-3 py-2" disabled>
                                        <span class="input-group-text border rounded-pill">%</span>
                                    </div>
                                    <small class="text-muted">This offer is applied to all products in this category</small>
                                </div>

                                <!-- Add applied offer display -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Applied Offer</label>
                                    <div class="input-group">
                                        <input type="text" id="appliedOffer" class="form-control border rounded-pill shadow-sm px-3 py-2" disabled>
                                        <span class="input-group-text border rounded-pill">%</span>
                                    </div>
                                    <small class="text-muted">The larger of product and category offers will be applied</small>
                                </div>
                                <!-- Quantity -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Quantity</label>
                                    <input type="number" name="quantity" class="form-control border rounded-pill shadow-sm px-3 py-2"  />
                                </div> 
                                <!-- Color -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Color</label>
                                    <input type="text" name="color" class="form-control border rounded-pill shadow-sm px-3 py-2" />
                                </div>
                                <!-- Image Upload Section Below the Form -->
                                <div class="image-upload-section">
                                    <h3 style="color: #000000;" class="section-title">Product Images</h3>
                                    <div class="image-preview-container" id="imagePreviewContainer">
                                        <!-- Preview images will be dynamically added here -->
                                    </div>
                                    <input type="file" id="productImage" name="productImage" class="file-input" accept="image/*" multiple>
                                    <label for="productImage" class="upload-label">Add Images</label>

                                    <!-- Save Button for Cropped Image (Initially Hidden) -->
                                    <div id="croppedImageSection" style="display: none;">
                                        <button type="button" id="saveCropBtn" class="crop-btn">Save Crop</button>
                                    </div>
                                </div>

                                <!-- Action Buttons -->
                                <div class="d-flex justify-content-between mt-4">
                                    <a href="/admin/products" class="btn btn-outline-secondary px-4 py-2 rounded-pill">
                                        <i class="fas fa-arrow-left"></i> Cancel
                                    </a>
                                    <button class="btn btn-primary px-4 py-2 rounded-pill" type="submit">
                                        <i class="fas fa-save"></i> Add Product
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>                

            </main>
            <!-- MAIN -->
        </section>
        <!-- CONTENT -->

<!-- Include Cropper.js CSS and JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.product-form');
    
    form.onsubmit = async function(e) {
        e.preventDefault();
        let isValid = true;
        let errorMessages = [];

        // Validate Required Fields
        const requiredFields = ['productName', 'brand', 'description', 'regularPrice', 'salePrice', 'quantity' , 'color'];
        requiredFields.forEach(field => {
            const input = document.querySelector(`[name="${field}"]`);
            if (!input || input.value.trim() === '') {
                isValid = false;
                errorMessages.push(`❌ ${field} is required.`);
            }
        });

        // Product Name Validation
        const productName = document.querySelector('[name="productName"]').value.trim();
        if (/\d/.test(productName)) {  
            isValid = false;  
            errorMessages.push('❌ Product name cannot contain numbers.');  
        }

        // Category Validation
        const categorySelect = document.querySelector('[name="productCategory"]');   
        console.log("Selected Category:", categorySelect.value);

        if (!categorySelect.value) {
            isValid = false;
            errorMessages.push('❌ Please select a category.');
        }

        // Price Validation
        const regularPrice = parseFloat(document.querySelector('[name="regularPrice"]').value);
        const salePrice = parseFloat(document.querySelector('[name="salePrice"]').value);
        const offerValue = parseFloat(document.querySelector('[name="offer"]').value);

        if (offerValue < 0 || offerValue > 100) {
            isValid = false;
            errorMessages.push('❌ Offer must be between 0-100%');
        }

        if (salePrice <= 0) {
            isValid = false;
            errorMessages.push('❌ Sale price must be greater than zero');
        }

        if (regularPrice <= 0) {
            isValid = false;
            errorMessages.push('❌ Regular price must be greater than zero');
        }

        // Image Validation
        const imageInput = document.querySelector('#productImage');
        const uploadedFiles = Array.from(imageInput.files);
        const totalImages = uploadedFiles.length + croppedFiles.length; // Count uploaded + cropped

        if (totalImages < 3) {
            isValid = false;
            errorMessages.push('❌ At least 3 images are required.');
        }

         // Color Validation
        const colorInput = document.querySelector('[name="color"]'); 
        const colorValue = colorInput.value.trim();

        if (!/^[A-Za-z\s]+$/.test(colorValue)) {
            isValid = false;
            errorMessages.push('❌ Color should only contain letters and spaces.');
        }

        if (!isValid) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                html: errorMessages.join('<br>'),
                confirmButtonColor: '#ff3b30'
            });
            return false;
        }

        const formData = new FormData(form);
        console.log('form datas:: ', formData);
        

        try {
            const response = await fetch('/admin/addProduct', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (!result || !result.success) {  
                Swal.fire({
                    icon: 'error',
                    title: 'Oops!',
                    text: result?.message || 'Something went wrong',
                    confirmButtonColor: '#ff3b30'
                });
                return;
            }


            Swal.fire({
            icon: 'success',
            title: 'Product Added!',
            confirmButtonColor: '#4CAF50'
        }).then(() => {
            setTimeout(() => {
                window.location.href = '/admin/products';
            }, 1000); 
        });

        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred. Please try again.',
                confirmButtonColor: '#ff3b30'
            });
        }
    };
});

        const saveCropBtn = document.getElementById('saveCropBtn');
        const previewContainer = document.getElementById('imagePreviewContainer');
        let cropper; // Global so we don't recreate it every damn time
        let currentCroppingImage = null;
        let croppedFiles = [];

        // Bind the save crop button once
        saveCropBtn.addEventListener("click", function () {
            if (cropper) {
                cropper.getCroppedCanvas().toBlob((blob) => {
                    let fileName = `cropped_${Date.now()}.png`;
                    let croppedFile = new File([blob], fileName, { type: 'image/png' });
                    
                    // Create a new preview item for the cropped image
                    const previewItem = document.createElement('div');
                    previewItem.classList.add('image-preview-item');

                    const previewImage = document.createElement('img');
                    previewImage.src = URL.createObjectURL(croppedFile);
                    previewImage.style.maxWidth = '100%';
                    previewItem.appendChild(previewImage);

                    // Create a delete button for the cropped image
                    const deleteBtn = document.createElement('button');
                    deleteBtn.textContent = 'Delete';
                    deleteBtn.classList.add('delete-btn');
                    deleteBtn.addEventListener('click', function () {
                        previewContainer.removeChild(previewItem);
                        croppedFiles = croppedFiles.filter(file => file !== croppedFile);
                    });
                    previewItem.appendChild(deleteBtn);

                    // Append the cropped image to the preview container
                    previewContainer.appendChild(previewItem);
                    croppedFiles.push(croppedFile);

                    // Remove the original cropping image if present
                    if (currentCroppingImage) {
                        previewContainer.removeChild(currentCroppingImage);
                        currentCroppingImage = null;
                    }
                    
                    cropper.destroy();
                    cropper = null;
                    document.getElementById('croppedImageSection').style.display = 'none';
                }, 'image/png');
            }
        });

        document.getElementById('productImage').addEventListener('change', function (e) {
            const files = Array.from(e.target.files); // Convert FileList to an array
            
            // Loop through the files once, babe
            files.forEach(file => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.classList.add('preview-image');
                    img.style.maxWidth = '100px';
                    img.style.cursor = 'pointer';
                    
                    // Append the image without clearing previous ones
                    previewContainer.appendChild(img);
                    
                    // Attach cropping functionality
                    img.addEventListener('click', function () {
                        if (cropper) {
                            cropper.destroy();
                        }
                        currentCroppingImage = img;
                        img.style.maxWidth = '100%'; 
                        cropper = new Cropper(img, {
                            aspectRatio: NaN, 
                            viewMode: 1, 
                            autoCropArea: 1, 
                            responsive: true,
                            movable: true, 
                            zoomable: true, 
                            minCropBoxHeight: 200, 
                        });

                        document.getElementById('croppedImageSection').style.display = 'block';
                    });
                };
                reader.readAsDataURL(file);
            });
            

        });


</script>

<script>
    // Store category offers data
    const categoryOffers = {};
    <% categories.forEach(cat => { %>
        categoryOffers["<%= cat._id %>"] = <%= cat.categoryOffer || 0 %>;
    <% }) %>
    
    document.addEventListener('DOMContentLoaded', () => {
        const regularPrice = document.querySelector('input[name="regularPrice"]');
        const salePrice = document.querySelector('input[name="salePrice"]');
        const offer = document.querySelector('input[name="offer"]');
        const categorySelect = document.querySelector('select[name="productCategory"]');
        const categoryOfferDisplay = document.getElementById('categoryOffer');
        const appliedOfferDisplay = document.getElementById('appliedOffer');
        
        // Function to update category offer display
        function updateCategoryOffer() {
            const selectedCategoryId = categorySelect.value;
            const categoryOffer = categoryOffers[selectedCategoryId] || 0;
            categoryOfferDisplay.value = categoryOffer;
            return categoryOffer;
        }
        
        // Function to calculate the applied offer
        function getAppliedOffer() {
            const productOffer = parseFloat(offer.value) || 0;
            const categoryOffer = updateCategoryOffer();
            const appliedOffer = Math.max(productOffer, categoryOffer);
            appliedOfferDisplay.value = appliedOffer;
            return appliedOffer;
        }
        
        // Update when category changes
        categorySelect.addEventListener('change', () => {
            getAppliedOffer();
            if(regularPrice.value) {
                const regular = parseFloat(regularPrice.value);
                const appliedOffer = getAppliedOffer();
                salePrice.value = (regular - (regular * appliedOffer / 100)).toFixed(2);
            }
        });
    
        // Update sale price when offer changes
        offer.addEventListener('input', () => {
            if(regularPrice.value) {
                const regular = parseFloat(regularPrice.value);
                const appliedOffer = getAppliedOffer();
                salePrice.value = (regular - (regular * appliedOffer / 100)).toFixed(2);
            }
        });
    
        // Update offer when sale price changes
        salePrice.addEventListener('input', () => {
            if(regularPrice.value && salePrice.value) {
                const regular = parseFloat(regularPrice.value);
                const sale = parseFloat(salePrice.value);
                const calculatedOffer = ((regular - sale) / regular) * 100;
                const categoryOffer = updateCategoryOffer();
                
                // Only update product offer if it would be higher than category offer
                if (calculatedOffer > categoryOffer) {
                    offer.value = calculatedOffer.toFixed(2);
                } else {
                    // If category offer is higher, keep it as is
                    getAppliedOffer();
                }
            }
        });
    
        // Update when regular price changes
        regularPrice.addEventListener('input', () => {
            if(regularPrice.value) {
                const regular = parseFloat(regularPrice.value);
                const appliedOffer = getAppliedOffer();
                salePrice.value = (regular - (regular * appliedOffer / 100)).toFixed(2);
            }
        });
        
        // Initialize displays
        updateCategoryOffer();
        getAppliedOffer();
    });
</script>
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
<script src="/js/admin.js"></script>
</body>
</html>